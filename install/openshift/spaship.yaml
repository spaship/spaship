apiVersion: v1
kind: Template
labels:
  template: spaship-template
metadata:
  name: spaship-template
  annotations:
    "description": "SPAship is an open source platform for deploying, integrating, and managing single-page apps (SPAs)."
    "iconClass": "icon-github"
    "openshift.io/display-name": "SPAship"
    "openshift.io/provider-display-name": "SPAship"
    "openshift.io/support-url": "https://github.com/spaship/spaship"
    "openshift.io/documentation-url": "https://spaship.io"
    "tags": "spaship,spa,node,mongodb"
objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${name}-www
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: ${WWW_VOLUME_CAPACITY}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${name}-mongodb
    stringData:
      database-admin-password: "${MONGODB_ADMIN_PASSWORD}"
      database-name: "${MONGODB_DATABASE}"
      database-password: "${MONGODB_PASSWORD}"
      database-user: "${MONGODB_USER}"
      database-url: "${MONGODB_URL}"
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${name}-httpd-config
    data:
      forbidden.conf: |-
        <FilesMatch "^spaship\.yaml">
            Require all denied
        </FilesMatch>
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${name}-httpd-ssi
    data:
      index.html: >-
        <!--#if expr="v('HTTP_COOKIE') =~ /rh_locale=(en|ja|ko|zh_CN)/ && $1 =~
        /(.*)/" -->
            <!--#set var="locale" value="$0" -->
        <!--#else -->
            <!--#set var="locale" value="en" -->
        <!--#endif -->
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${name}-api-config
    data:
      API_PORT: "8080"
      AUTH__KEYCLOAK__CLIENTID: ${KEYCLOAK_CLIENTID}
      AUTH__KEYCLOAK__REALM: ${KEYCLOAK_REALM}
      AUTH__KEYCLOAK__URL: ${KEYCLOAK_URL}
      AUTH__KEYCLOAK__ID_PROP: ${KEYCLOAK_ID_PROP}
      AUTH__KEYCLOAK__PUBKEY: ${KEYCLOAK_PUBKEY}
      LOG_FORMAT: json
      WEBROOT: /var/www/html
      UPLOAD_DIR: /tmp
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${name}-router-config
    data:
      LOG_FORMAT: json
      ROUTER_PORT: "8080"
      webroot: /var/www/html
      target: http://${name}-httpd:8080
      FALLBACK: ""
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${name}-httpd
        tag: ${tag}
      name: ${name}-httpd
    spec:
      replicas: ${replica}
      selector:
        app: ${name}-httpd
        deploymentconfig: ${name}-httpd
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ${name}-httpd
            deploymentconfig: ${name}-httpd
            tag: ${tag}
        spec:
          volumes:
            - name: webroot
              persistentVolumeClaim:
                claimName: ${name}-www
            - name: ssi-init
              configMap:
                defaultMode: 420
                items:
                  - key: index.html
                    path: index.html
                name: ${name}-httpd-ssi
          containers:
            - image: spaship/httpd:${tag}
              name: ${name}-httpd
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:
                limits:
                  cpu: ${cpu_limit}
                requests:
                  cpu: ${cpu_request}
              volumeMounts:
                - name: webroot
                  mountPath: /var/www/html
                - name: ssi-init
                  mountPath: /var/www/html/.include/init
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: Always
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext:
            supplementalGroups:
              - 10000003
          terminationGracePeriodSeconds: 30
      test: false
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${name}-api
        tag: ${tag}
      name: ${name}-api
    spec:
      replicas: ${replica}
      selector:
        app: ${name}-api
        deploymentconfig: ${name}-api
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ${name}-api
            deploymentconfig: ${name}-api
            tag: ${tag}
        spec:
          volumes:
            - name: webroot
              persistentVolumeClaim:
                claimName: ${name}-www
          containers:
            - image: spaship/api:${tag}
              name: ${name}-api
              ports:
                - containerPort: 8080
                  protocol: TCP
              env:
                - name: SPASHIP_DB__MONGO__USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${name}-mongodb
                - name: SPASHIP_DB__MONGO__PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${name}-mongodb
                - name: SPASHIP_DB__MONGO__DB_NAME
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: ${name}-mongodb
                - name: SPASHIP_DB__MONGO__URL
                  valueFrom:
                    secretKeyRef:
                      key: database-url
                      name: ${name}-mongodb
              envFrom:
                - configMapRef:
                    name: ${name}-api-config
                  prefix: SPASHIP_
              resources:
                limits:
                  cpu: ${cpu_limit}
                requests:
                  cpu: ${cpu_request}
              volumeMounts:
                - name: webroot
                  mountPath: /var/www/html
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /liveness
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /readiness
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext:
            supplementalGroups:
              - 10000003
          terminationGracePeriodSeconds: 30
      test: false
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${name}-router
        tag: ${tag}
      name: ${name}-router
    spec:
      replicas: ${{replica}}
      selector:
        app: ${name}-router
        deploymentconfig: ${name}-router
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ${name}-router
            deploymentconfig: ${name}-router
            tag: ${tag}
        spec:
          volumes:
            - name: webroot
              persistentVolumeClaim:
                claimName: ${name}-www
          containers:
            - image: spaship/router:${tag}
              name: ${name}-router
              ports:
                - containerPort: 8080
                  protocol: TCP
              envFrom:
                - configMapRef:
                    name: ${name}-router-config
                  prefix: SPASHIP_
              resources:
                limits:
                  cpu: ${cpu_limit}
                requests:
                  cpu: ${cpu_request}
              volumeMounts:
                - name: webroot
                  mountPath: /var/www/html
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: Always
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext:
            supplementalGroups:
              - 10000003
          terminationGracePeriodSeconds: 30
      test: false
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${name}-httpd
      name: ${name}-httpd
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: ${name}-httpd
        deploymentconfig: ${name}-httpd
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${name}-api
      name: ${name}-api
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: ${name}-api
        deploymentconfig: ${name}-api
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${name}-router
      name: ${name}-router
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: ${name}-router
        deploymentconfig: ${name}-router
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Route
    metadata:
      annotations:
        haproxy.router.openshift.io/disable_cookies: "true"
        haproxy.router.openshift.io/timeout: "10m"
      labels:
        app: ${name}-api
      name: ${name}-api
    spec:
      host: ${name}-api${urlSuffix}
      port:
        targetPort: 8080-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${name}-api
        weight: 100
      wildcardPolicy: None
  - apiVersion: v1
    kind: Route
    metadata:
      annotations:
        haproxy.router.openshift.io/disable_cookies: "true"
      labels:
        app: ${name}-router
      name: ${name}-router
    spec:
      host: ${name}-router${urlSuffix}
      port:
        targetPort: 8080-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${name}-router
        weight: 100
      wildcardPolicy: None
parameters:
  - name: name
    displayName: Name Prefix
    description: Component name prefix
    value: spaship
    required: true
  - name: tag
    displayName: Version
    description: SPAship tag
    required: true
    value: latest
  - name: urlSuffix
    displayName: Url Suffix
    description: Router url suffix for spaship-router and spaship-api
    required: true
    value: .ext.us-west.dc.prod.paas.redhat.com
  - name: replica
    description: number of replicas
    value: "1"
    required: false
  - name: cpu_limit
    displayName: CPU limit
    description: CPU limit
    value: "100m"
  - name: cpu_request
    displayName: CPU request
    description: CPU request
    value: "25m"
  - name: WWW_VOLUME_CAPACITY
    displayName: "WWW Volume Capacity"
    description: "Volume space available for www data, e.g. 512Mi, 2Gi."
    value: "2Gi"
    required: true
  - name: MONGODB_URL
    displayName: MongoDB Connection Url
    description: MongoDB Url for connecting the database.
    required: true
  - name: MONGODB_USER
    displayName: MongoDB Connection Username
    description: Username for MongoDB user that will be used for accessing the database.
    required: true
  - name: MONGODB_PASSWORD
    displayName: MongoDB Connection Password
    description: Password for the MongoDB connection user.
    required: true
  - name: MONGODB_DATABASE
    displayName: MongoDB Database Name
    description: Name of the MongoDB database accessed.
    required: true
    value: spaship
  - name: KEYCLOAK_CLIENTID
    displayName: "Keycloak Client ID"
    description: "The Keycloak client id for your SPAship Manager instance."
    required: true
  - name: KEYCLOAK_REALM
    displayName: "Keycloak REALM"
    description: "The Keycloak Realm under which your SPAship Manager client is registered."
    required: true
  - name: KEYCLOAK_URL
    displayName: "Keycloak URL"
    description: "The URL to a Keycloak instance you wish to use for authentication."
    required: true
  - name: KEYCLOAK_ID_PROP
    displayName: "JWT user UUID prop"
    description: "The JWT property to treat as a UUID."
    required: true
  - name: KEYCLOAK_PUBKEY
    displayName: "Keycloak public key"
    description: "Your Keycloak realm's public key."
    required: true
