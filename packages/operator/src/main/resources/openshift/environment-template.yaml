kind: "Template"
apiVersion: "v1"
metadata:
  name: "environment-template"
labels:
  template: "environment-template"
parameters:
  - name: "ENV"
    description: "Environment of the website"
    required: true
  - name: "WEBSITE"
    description: "Name of website"
    required: true
  - name: "WEBSITE_VERSION"
    description: "Version of website"
    required: true
  #  - name: "TRACE_ID"
  #    description: "tracing UUID from operator during creation"
  #    required: true
  - name: "IMAGE_HTTPD"
    value: "quay.io/spaship/httpd"
    required: false
  - name: "IMAGE_API"
    value: "quay.io/spaship/sidecar"
    required: false
  - name: "IMAGE_HTTPD_VERSION"
    value: "1.3.6"
    required: false
  - name: "IMAGE_API_VERSION"
    value: "v1.4.0"
    required: false
  - name: "DOMAIN"
    required: true
  - name: "APP_INSTANCE_PREFIX"
    description: "application instance prefix"
    required: true
  - name: "STORAGE_CLASS"
    description: "storage class of the deployment"
    required: true
  - name: "NS"
    description: "name of the namespace"
    required: true
  - name: "SHARD"
    description: "shard type of router route"
    required: true
  - name: "ROUTER_DOMAIN"
    description: "domain for router"
    required: true
objects:
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: sidecar-config-${WEBSITE}-${ENV}
      labels:
        website: ${WEBSITE}
        managedBy: spaship
        environment: ${ENV}
        websiteVersion: ${WEBSITE_VERSION}
        app.kubernetes.io/managed-by: spaship
    data:
      SIDECAR_SPADIR: "/app/data"
      SIDECAR_WEBSITENAME: ${WEBSITE}
      SIDECAR_ENVIRONMENTNAME: ${ENV}
      SIDECAR_WEBSITE_VERSION: ${WEBSITE_VERSION}
      SPASHIP_MAPPING_FILE: ".spaship"
  - kind: Service
    apiVersion: v1
    metadata:
      name: svc-${APP_INSTANCE_PREFIX}-${WEBSITE}-${ENV}
      labels:
        website: ${WEBSITE}
        managedBy: spaship
        environment: ${ENV}
        #tracing: ${TRACE_ID}
        websiteVersion: ${WEBSITE_VERSION}
        app.kubernetes.io/managed-by: spaship
    spec:
      #      type: NodePort
      ports:
        # Expose main container
        - port: 80
          targetPort: 8080
          name: http
        # Expose rest api
        - port: 8081
          targetPort: 8081
          name: http-api
      selector:
        managedBy: spaship
        website: ${WEBSITE}
        environment: ${ENV}
        websiteVersion: ${WEBSITE_VERSION}
  - kind: PersistentVolumeClaim
    metadata:
      name: data-${WEBSITE}-${ENV}-${APP_INSTANCE_PREFIX}
      annotations:
        kubernetes.io/reclaimPolicy: Delete
        trident.netapp.io/reclaimPolicy: Delete
      labels:
        paas.redhat.com/appcode: SPAS-001
        app.kubernetes.io/managed-by: spaship
    spec:
      accessModes: [ "ReadWriteMany" ]
      storageClassName: "${STORAGE_CLASS}"
      resources:
        requests:
          storage: 1Gi
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: ${WEBSITE}-${ENV}
      website: ${WEBSITE}
      labels:
        website: ${WEBSITE}
        managedBy: spaship
        environment: ${ENV}
        #tracing: ${TRACE_ID}
        websiteVersion: ${WEBSITE_VERSION}
        app.kubernetes.io/managed-by: spaship
        app.kubernetes.io/part-of: ${WEBSITE}
        app.openshift.io/runtime: apache
    spec:
      selector:
        matchLabels:
          managedBy: spaship
          website: ${WEBSITE}
          environment: ${ENV}
      replicas: 1
      template:
        metadata:
          labels:
            website: ${WEBSITE}
            managedBy: spaship
            environment: ${ENV}
            #tracing: ${TRACE_ID}
            websiteVersion: ${WEBSITE_VERSION}
        spec:
          containers:
            # Main container to serve data
            - name: httpd-server
              image: "${IMAGE_HTTPD}:${IMAGE_HTTPD_VERSION}"
              imagePullPolicy: IfNotPresent
              resources:
                requests:
                  cpu: 50m
                  memory: 100Mi
                limits:
                  cpu: 500m
                  memory: 250Mi
              ports:
                - containerPort: 8080
              volumeMounts:
                - mountPath: "/var/www/html/"
                  name: data-${WEBSITE}-${ENV}-${APP_INSTANCE_PREFIX}
                  subpath: html
            - name: sidecar
              image: "${IMAGE_API}:${IMAGE_API_VERSION}"
              imagePullPolicy: Always     # Always / IfNotPresent
              livenessProbe:
                httpGet:
                  path: "/api/upload"
                  port: 8081
                initialDelaySeconds: 2
                failureThreshold: 10
                periodSeconds: 10
              readinessProbe:
                httpGet:
                  path: "/api/upload"
                  port: 8081
                initialDelaySeconds: 2
                failureThreshold: 5
                periodSeconds: 10
              resources:
                requests:
                  cpu: 100m
                  memory: 150Mi
                limits:
                  cpu: 250m
                  memory: 384Mi
              ports:
                - containerPort: 8081
              env:
                - name: APP_DATA_DIR
                  value: "/app/data/"
              volumeMounts:
                - mountPath: "/app/data/"
                  name: data-${WEBSITE}-${ENV}-${APP_INSTANCE_PREFIX}
                  subpath: data
              envFrom:
                - configMapRef:
                    name: sidecar-config-${WEBSITE}-${ENV}
          volumes:
            - name: data-${WEBSITE}-${ENV}-${APP_INSTANCE_PREFIX}
              persistentVolumeClaim:
                claimName: data-${WEBSITE}-${ENV}-${APP_INSTANCE_PREFIX}

          #volumes:
          #  - name: data
          #    emptyDir: { }
  #      volumeClaimTemplates:
  #        - metadata:
  #            annotations:
  #              kubernetes.io/reclaimPolicy: Delete
  #            labels:
  #              paas.redhat.com/appcode: SPAS-001
  #              app.kubernetes.io/managed-by: spaship
  #            name: data-${WEBSITE}-${APP_INSTANCE_PREFIX}
  #          spec:
  #            accessModes: [ "ReadWriteOnce" ]
  #            storageClassName: "${STORAGE_CLASS}"
  #            resources:
  #              requests:
  #                storage: 1Gi

  - kind: Ingress
    apiVersion: networking.k8s.io/v1
    metadata:
      name: ing-${WEBSITE}-${ENV}
      labels:
        app.kubernetes.io/managed-by: spaship
        shard: internal
    spec:
      rules:
        - host: ${APP_INSTANCE_PREFIX}.${NS}.${WEBSITE}.${ENV}.${DOMAIN}
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: svc-${APP_INSTANCE_PREFIX}-${WEBSITE}-${ENV}
                    port:
                      number: 80
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: router-config-${WEBSITE}-${ENV}
      labels:
        website: ${WEBSITE}
        environment: ${ENV}
        app.kubernetes.io/managed-by: spaship
        type: router
    data:
      FALLBACK: ""
      LOG_FORMAT: json
      ROUTER_PORT: '8080'
      forwarded_host: ""
      target: http://svc-${APP_INSTANCE_PREFIX}-${WEBSITE}-${ENV}
      webroot: '/var/www/html'

  - kind: Service
    apiVersion: v1
    metadata:
      name: svc-router-${APP_INSTANCE_PREFIX}-${WEBSITE}-${ENV}
      labels:
        website: ${WEBSITE}
        environment: ${ENV}
        app.kubernetes.io/managed-by: spaship
        type: router
    spec:
      ports:
        - name: 8080-tcp
          protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        app.kubernetes.io/managed-by: spaship
        website: ${WEBSITE}
        environment: ${ENV}
        type: router

  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: router-${WEBSITE}-${ENV}
      website: ${WEBSITE}
      labels:
        website: ${WEBSITE}
        environment: ${ENV}
        type: router
        app.kubernetes.io/managed-by: spaship
        app.kubernetes.io/part-of: ${WEBSITE}
        app.openshift.io/runtime: nodejs
      annotations:
        app.openshift.io/connects-to: >-
          [{ "apiVersion":"apps/v1","kind":"Deployment","name":"${WEBSITE}-${ENV}" }]
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/managed-by: spaship
          website: ${WEBSITE}
          environment: ${ENV}
          type: router
      replicas: 1
      template:
        metadata:
          labels:
            app.kubernetes.io/managed-by: spaship
            website: ${WEBSITE}
            environment: ${ENV}
            type: router
        spec:
          containers:
            - name: spaship-router
              image: quay.io/spaship/router
              imagePullPolicy: IfNotPresent
              resources:
                requests:
                  cpu: 25m
                  memory: 128Mi
                limits:
                  cpu: 100m
                  memory: 256Mi
              ports:
                - containerPort: 8080
                  protocol: TCP
              env:
                - name: NODE_EXTRA_CA_CERTS
                  value: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                - name: NODE_OPTIONS
                  value: "--max-http-header-size=32768"
              volumeMounts:
                - mountPath: "/var/www/html/"
                  name: data-${WEBSITE}-${ENV}-${APP_INSTANCE_PREFIX}
              envFrom:
                - prefix: SPASHIP_
                  configMapRef:
                    name: router-config-${WEBSITE}-${ENV}
          volumes:
            - name: data-${WEBSITE}-${ENV}-${APP_INSTANCE_PREFIX}
              persistentVolumeClaim:
                claimName: data-${WEBSITE}-${ENV}-${APP_INSTANCE_PREFIX}

  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: route-${WEBSITE}-${ENV}-${APP_INSTANCE_PREFIX}
      labels:
        shard: ${SHARD}
      annotations:
        #haproxy.router.openshift.io/disable_cookies: 'true'
        haproxy.router.openshift.io/timeout: 5m
    spec:
      host: route-${WEBSITE}-${ENV}-${APP_INSTANCE_PREFIX}.${ROUTER_DOMAIN}
      to:
        kind: Service
        name: svc-router-${APP_INSTANCE_PREFIX}-${WEBSITE}-${ENV}
      port:
        targetPort: 8080-tcp
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
      wildcardPolicy: None
